#include <stdio.h>
#define MaxSize 50
typedef struct {
    int data[MaxSize];
    int top;
} SqStack, *stack;

stack InitStack(stack s);

stack StackEmpty(stack s);

stack Push(stack s,int x);

stack Pop(stack s,int x);

stack GetTop(stack s, int x);

stack bracketcheck(int str[],int length);

int main(){
    int str[] = {'(','(','(','{','[',']','}',')',')',')'};
    bracketcheck(str,5);
    return 0;
}

stack bracketcheck(int str[],int length){
    stack s; // = (stack)malloc(sizeof(SqStack));
    InitStack(s);
    for (int i = 0; i<length; i++){
        if(str[i] == '(' || str[i]== '[' || str[i]=='{'){
            Push(s,str[i]);
        }
        else{
            if(StackEmpty(s)){
                return false;
            }
        int topElem;
        Pop(s,topElem);
        if(str[i] == ')' && topElem!='('){
        return false;
        }
        if(str[i] == ']' && topElem!='['){
        return false;
        }
        if(str[i] == '}' && topElem!='{'){
        return false;
        }
        }
    }
    return StackEmpty(s); //if stack is empty, then return true, then return return true;
}

stack InitStack(stack s){
    s.top = -1;
}

stack StackEmpty(stack s){
    if(s.top == -1){
        return true;
    }
    else{
        return false;
    }
}

stack Push(stack s,int x){
    if(s.top == MaxSize-1){
        return false;
    }
    s.data[++s.top] = x;
    return ture;
}

stack Pop(stack s,int x){
    if(s.top == -1){
        return false;
    }
    x = s.data[s.top--];
    return true;
}

stack GetTop(stack s, int x){
    if(s.top == -1){
        return false;
    }
    x = s.data[s.top];
    return true;
}
